<?xml version="1.0" encoding="utf-8"?>
<etf:ExecutableTestSuite xmlns="http://www.interactive-instruments.de/etf/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:etf="http://www.interactive-instruments.de/etf/2.0" xmlns:ii="http://www.interactive-instruments.de" id="EID669c2672-0d7e-11e8-d213-09173f13e4c5" xsi:schemaLocation="http://www.interactive-instruments.de/etf/2.0 http://resources.etf-validator.net/schema/v2/service/service.xsd">
	<itemHash>bQ==</itemHash>
	<remoteResource>https://github.com/interactive-instruments/etf-ets-repository</remoteResource>
	<localPath>/auto</localPath>
	<label>Schematron example</label>
	<description>...</description>
	<reference>../example-bsxets.xq</reference>
	<version>1.0.0</version>
	<author>See original schematron file:/Users/portele/Documents/Dropbox/ETF/github/etf-ets-repository/example/3_schematrontest/schematron.sch</author>
	<creationDate>2018-02-09T10:48:37.335+01:00</creationDate>
	<lastEditor>ETF Schematron to ETF Executable Test Suite Transformer</lastEditor>
	<lastUpdateDate>2018-02-09T10:48:37.335+01:00</lastUpdateDate>
	<testDriver ref="EID4dddc9e2-1b21-40b7-af70-6a2d156ad130"/>
	<translationTemplateBundle ref="EID669c2672-0d7e-11e8-d269-09173f13e4c5"/>
	<ParameterList name="ETF Standard Parameters for XML test objects">
		<parameter name="files_to_test" required="true">
			<defaultValue>.*</defaultValue>
			<description ref="TR.filesToTest"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="tests_to_execute" required="false">
			<defaultValue>.*</defaultValue>
			<description ref="TR.testsToExecute"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
		<parameter name="xml_namespaces" required="false">
			<defaultValue>declare namespace gml='http://www.opengis.net/gml/3.2'; </defaultValue>
			<description ref="TR.xmlNamespaces"/>
			<allowedValues>.*</allowedValues>
			<type>string</type>
		</parameter>
	</ParameterList>
	<supportedTestObjectTypes>
		<testObjectType ref="EIDe1d4a306-7a78-4a3b-ae2d-cf5f0810853e"/>
	</supportedTestObjectTypes>
	<testModules>
		<TestModule id="EID669c2742-0d7e-11e8-d2e1-09173f13e4c5">
			<label>Schematron pattern 1</label>
			<description>...</description>
			<parent ref="EID669c2672-0d7e-11e8-d213-09173f13e4c5"/>
			<testCases>
				<TestCase id="EID669c2744-0d7e-11e8-d2e1-09173f13e4c5">
					<label>Test Case 1</label>
					<description>...</description>
					<parent ref="EID669c2742-0d7e-11e8-d2e1-09173f13e4c5"/>
					<testSteps>
						<TestStep id="EID669c2676-0d7e-11e8-d695-09173f13e4c5">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID669c2744-0d7e-11e8-d2e1-09173f13e4c5"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID669c2748-0d7e-11e8-d2e1-09173f13e4c5">
									<label>Assertion 1</label>
									<description>This profile prohibits use of gml:metaDataProperty elements for referencing metadata in instance documents.</description>
									<parent ref="EID669c2676-0d7e-11e8-d695-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*/*/*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; not(gml:metaDataProperty)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.1.1', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.1.1"/>
									</etf:translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
				<TestCase id="EID669c274c-0d7e-11e8-d2e2-09173f13e4c5">
					<label>Test Case 2</label>
					<description>...</description>
					<parent ref="EID669c2742-0d7e-11e8-d2e1-09173f13e4c5"/>
					<testSteps>
						<TestStep id="EID669c2677-0d7e-11e8-d717-09173f13e4c5">
							<label>IGNORE</label>
							<description>IGNORE</description>
							<parent ref="EID669c274c-0d7e-11e8-d2e2-09173f13e4c5"/>
							<statementForExecution>not applicable</statementForExecution>
							<testItemType ref="EIDf483e8e8-06b9-4900-ab36-adad0d7f22f0"/>
							<testAssertions>
								<TestAssertion id="EID669c2750-0d7e-11e8-d2e2-09173f13e4c5">
									<label>Assertion 1</label>
									<description>Spatial properties are limited to the set of geometric types consisting of point, curve with linear and/or circular arc interpolation, planar surface, or aggregates thereof. Spatial topology is excluded.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; not(self::gml:Node|self::gml:Edge|self::gml:Face|self::gml:TopoSolid|self::gml:TopoPoint|self::gml:TopoCurve|self::gml:TopoSurface|self::gml:TopoVolume|self::gml:TopoComplex)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.1', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.1"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c2755-0d7e-11e8-d2e2-09173f13e4c5">
									<label>Assertion 2</label>
									<description>Curves (standalone or within surfaces) must have linear and/or circular arc interpolation (LineString, Curve with Arc, Circle or CircleByCenterpoint segments)</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; not(self::gml:Curve) or self::gml:Curve/gml:segments[gml:LineStringSegment|gml:Arc|gml:Circle|gml:CircleByCenterPoint]", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.2', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.2"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c275b-0d7e-11e8-d2e3-09173f13e4c5">
									<label>Assertion 3</label>
									<description>Planar surface types are restricted to Polygon or Surface elements.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; not(self::gml:OrientableSurface|self::gml:CompositeSurface|self::gml:PolyhedralSurface|self::gml:Tin|self::gml:TriangulatedSurface)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.3', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.3"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c2760-0d7e-11e8-d2e4-09173f13e4c5">
									<label>Assertion 4</label>
									<description>Supported geometry types are restricted to point, curve with linear and/or circular arc interpolation, planar surface, or aggregates thereof.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; not(self::gml:Solid|self::gml:MultiSolid|self::gml:CompositeSolid|self::gml:CompositeCurve|self::gml:Grid)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.4', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.4"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c2765-0d7e-11e8-d2e4-09173f13e4c5">
									<label>Assertion 5</label>
									<description>Geometry coordinates shall only be specified using the gml:pos element for gml:Point.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; count(self::gml:Point/gml:pos) = count(self::gml:Point/*)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.5', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.5"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c2768-0d7e-11e8-d2e4-09173f13e4c5">
									<label>Assertion 6</label>
									<description>Geometry coordinates shall only be specified using the gml:pos element for gml:CircleByCenterPoint.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; count(self::gml:CircleByCenterPoint/gml:pos|self::gml:CircleByCenterPoint/gml:radius) = count(self::gml:CircleByCenterPoint/*)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.6', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.6"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c276e-0d7e-11e8-d2e5-09173f13e4c5">
									<label>Assertion 7</label>
									<description>Geometry coordinates shall only be specified using the gml:posList element for gml:LineStringSegment.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; count(self::gml:LineStringSegment/gml:posList) =                 count(self::gml:LineStringSegment/*)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.7', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.7"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c2771-0d7e-11e8-d2e5-09173f13e4c5">
									<label>Assertion 8</label>
									<description>Geometry coordinates shall only be specified using the gml:posList element for gml:LinearRing.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; count(self::gml:LinearRing/gml:posList) =                 count(self::gml:LinearRing/*)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.8', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.8"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c2774-0d7e-11e8-d2e6-09173f13e4c5">
									<label>Assertion 9</label>
									<description>Geometry coordinates shall only be specified using the gml:posList element for gml:Arc.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; count(self::gml:Arc/gml:posList) = count(self::gml:Arc/*)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.9', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.9"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c2777-0d7e-11e8-d2e6-09173f13e4c5">
									<label>Assertion 10</label>
									<description>Geometry coordinates shall only be specified using the gml:posList element for gml:Circle.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; count(self::gml:Circle/gml:posList) =                 count(self::gml:Circle/*)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.10', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.10"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c277c-0d7e-11e8-d2e6-09173f13e4c5">
									<label>Assertion 11</label>
									<description>This profile restricts instance documents to using the property container gml:pointMember for the MultiPoint geometry type.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; not(self::gml:MultiPoint/gml:pointMembers)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.11', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.11"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c2780-0d7e-11e8-d2e7-09173f13e4c5">
									<label>Assertion 12</label>
									<description>This profile restricts instance documents to using the property container gml:curveMember for the MultiCurve geometry type.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; not(self::gml:MultiCurve/gml:curveMembers)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.12', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.12"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c2783-0d7e-11e8-d2e7-09173f13e4c5">
									<label>Assertion 13</label>
									<description>This profile restricts instance documents to using the property container gml:surfaceMember for the MultiSurface geometry type.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; not(self::gml:MultiSurface/gml:surfaceMembers)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.13', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.13"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c2786-0d7e-11e8-d2e7-09173f13e4c5">
									<label>Assertion 14</label>
									<description>This profile restricts instance documents to using the property container gml:geometryMember for the MultiGeometry geometry type.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; not(self::gml:MultiGeometry/gml:geometryMembers)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.14', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.14"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c278b-0d7e-11e8-d2e8-09173f13e4c5">
									<label>Assertion 15</label>
									<description>The content of gml:Surface elements is restricted to gml:PolygonPatch patches.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; count(self::gml:Surface/gml:patches/gml:PolygonPatch) =                 count(self::gml:Surface/gml:patches/*)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.15', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.15"/>
									</etf:translationTemplates>
								</TestAssertion>
								<TestAssertion id="EID669c278e-0d7e-11e8-d2e8-09173f13e4c5">
									<label>Assertion 16</label>
									<description>Coordinate reference systems may have 1, 2 or 3 dimensions.</description>
									<parent ref="EID669c2677-0d7e-11e8-d717-09173f13e4c5"/>
									<expectedResult>NOT_APPLICABLE</expectedResult>
									<expression>                                                            
                                                            
let $errors := for $file in $db
return
for $i in $file/*//*

where not(xquery:eval("declare namespace gml='http://www.opengis.net/gml/3.2'; not(self::*/@srsDimension &gt; 3)", map { '': $i}))
return $i


return
(if ($errors) then 'FAILED' else 'PASSED',
local:error-statistics('TR.errors', count($errors)),
for $error in $errors
order by local:filename($error)
return
local:addMessage('TR.schtron.Schematron.example.err.1.2.16', map { 'filename': local:filename($error)  }))
                                                        </expression>
									<testItemType ref="EIDf0edc596-49d2-48d6-a1a1-1ac581dcde0a"/>
									<etf:translationTemplates>
										<etf:translationTemplate ref="TR.schtron.Schematron.example.err.1.2.16"/>
									</etf:translationTemplates>
								</TestAssertion>
							</testAssertions>
						</TestStep>
					</testSteps>
				</TestCase>
			</testCases>
		</TestModule>
	</testModules>
</etf:ExecutableTestSuite>
